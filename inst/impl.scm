(define instruction-implementations '())

(define-syntax push!
  (syntax-rules ()
    ((push! <list> <elt>)
     (set! <list> (cons <elt> <list>)))))

(define-syntax define-instruction
  (syntax-rules ()
    ((define-instruction (<opcode> <parameter> ...)
       <implementation> ...)
     (push! instruction-implementations
	    '((<opcode> <parameter> ...) . (string-append <implementation> ...))))))

(define (cpu-accessor a)
  (string-append "cpu" "->" a))

(define (register r)
  (cpu-accessor (case r
		  ((a) "af.msb")
		  ((b) "bc.msb")
		  ((c) "bc.lsb")
		  ((d) "de.msb")
		  ((e) "de.lsb")
		  ((h) "hl.msb")
		  ((l) "hl.lsb")
		  ((bc) "bc.pair")
		  ((de) "de.pair")
		  ((hl) "hl.pair")
		  ((ix) "ix")
		  ((iy) "iy")
		  ((sp) "sp")
		  ((pc) "pc"))))

(define (mem-read-8 . addr)
  (string-append "mem_read8(mem, " (apply string-append addr) ")"))
(define (mem-read-16 . addr)
  (string-append "mem_read16(mem, " (apply string-append addr) ")"))
(define (mem-write-8 addr value)
  (string-append "mem_write8(mem, " addr ", " value ")"))
(define (mem-write-16 addr value)
  (string-append "mem_write16(mem, " addr ", " value ")"))

;; 8-bit-load-instructions
(define-instruction (ld r r2)
  (register 'r) " = " (register 'r2) ";" "\n")
(define-instruction (ld r n)
  (register 'r) " = n;" "\n")
(define-instruction (ld r (hl))
  (register 'r) " = " (mem-read-8 (register 'hl)) ";" "\n")
(define-instruction (ld r (+ ix d))
  (register 'r) " = " (mem-read-8 (register 'ix) "+d") ";" "\n")
(define-instruction (ld r (+ iy d))
  (register 'r) " = " (mem-read-8 (register 'iy) "+d") ";" "\n")
(define-instruction (ld (hl) r)
  (mem-write-8 (register 'hl) (register 'r)) ";" "\n")
(define-instruction (ld (+ ix d) r)
  (mem-write-8 (string-append (register 'ix) "+d") (register 'r)) ";" "\n")
(define-instruction (ld (+ iy d) r)
  (mem-write-8 (string-append (register 'iy) "+d") (register 'r)) ";" "\n")
(define-instruction (ld (hl) n)
  (mem-write-8 (register 'hl) "n") ";" "\n")
(define-instruction (ld (+ ix d) n)
  (mem-write-8 (string-append (register 'ix) "+d") "n") ";" "\n")
(define-instruction (ld (+ iy d) n)
  (mem-write-8 (string-append (register 'iy) "+d") "n") ";" "\n")
(define-instruction (ld a (bc))
  (register 'a) " = " (mem-read-8 (register 'bc)) ";" "\n")
(define-instruction (ld a (de))
  (register 'a) " = " (mem-read-8 (register 'de)) ";" "\n")
(define-instruction (ld a (nn))
  (register 'a) " = " (mem-read-8 "nn") ";" "\n")
(define-instruction (ld (bc) a)
  (mem-write-8 (register 'bc) (register 'a)) ";" "\n")
(define-instruction (ld (de) a)
  (mem-write-8 (register 'de) (register 'a)) ";" "\n")
(define-instruction (ld (nn) a)
  (mem-write-8 "nn" (register 'a)) ";" "\n")
;; TODO the last four

;; 16-bit-load-instructions
(define-instruction (ld dd nn)
  (register 'dd) " = nn;" "\n")
(define-instruction (ld ix nn)
  (register 'ix) " = nn;" "\n")
(define-instruction (ld iy nn)
  (register 'iy) " = nn;" "\n")
(define-instruction (ld hl nn)
  ;; this might be faster as h=b[0];l=b[1], but it's not possible with the current system
  (register 'hl) " = nn;" "\n")
(define-instruction (ld dd (nn))
  (register 'dd) " = " (mem-read-16 "nn") ";" "\n")
(define-instruction (ld ix (nn))
  (register 'ix) " = " (mem-read-16 "nn") ";" "\n")
(define-instruction (ld iy (nn))
  (register 'iy) " = " (mem-read-16 "nn") ";" "\n")
(define-instruction (ld (nn) hl)
  (mem-write-16 "nn" (register 'hl)) ";" "\n")
(define-instruction (ld (nn) dd)
  (mem-write-16 "nn" (register 'dd)) ";" "\n")
(define-instruction (ld (nn) ix)
  (mem-write-16 "nn" (register 'ix)) ";" "\n")
(define-instruction (ld (nn) iy)
  (mem-write-16 "nn" (register 'iy)) ";" "\n")
(define-instruction (ld sp hl)
  (register 'sp) " = " (register 'hl) ";" "\n")
(define-instruction (ld sp ix)
  (register 'sp) " = " (register 'ix) ";" "\n")
(define-instruction (ld sp iy)
  (register 'sp) " = " (register 'iy) ";" "\n")
;; TODO push and pop

;; exchange-block-transfer-search-instructions

;; 8-bit-arithmetic-instructions
(define-instruction (add n)
  ;; TODO probably wrong
  (register 'a) " += n;" "\n")

;; 16-bit-arithmetic-instructions
(define-instruction (add hl dd)
  (register 'hl) " += " (register 'dd) ";" "\n")
;;(define-instruction (add hl nn)
;;  (register 'hl) " += nn;" "\n")
